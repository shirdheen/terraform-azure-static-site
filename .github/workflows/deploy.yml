name: Terraform CI/CD

# Defines when the workflow should run
on:
  push:
    branches:
      - main # On every push to the main branch
  pull_request: # On pull requests targeting any branch
  workflow_dispatch: # Adds a 'Run workflow' button

# Defines a job named terraform
jobs:
  terraform:
    name: "Terraform Validate, Plan and Apply"
    runs-on: ubuntu-latest # Specifies the OS for the runner (Ubuntu VM in the cloud)

    env:
      ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
      ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
      ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
      ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}

      TF_VAR_tenant_id: ${{fromJson(secrets.AZURE_CREDENTIALS).tenantId}}
      TF_VAR_object_id: ${{fromJson(secrets.AZURE_CREDENTIALS).objectId}}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3 # Checks out repo code into the runner so that Terraform can access it

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0 # Installs Terraform CLI on the Github-hosted runner

      - name: Terraform init
        run: terraform init # Initialises the Terraform project and downloads provider like azurerm

      - name: Terraform Format Check
        run: terraform fmt -check # Checks Terraform code formatting

      - name: Terraform Validate
        run: terraform validate # Checks if code syntax is correct and consistent

      - name: Terraform Plan
        run: terraform plan # Generates an execution plan (no changes made yet)

      - name: Terraform Apply
        if: github.event_name == 'workflow_dispatch'
        run: terraform apply -auto-approve

      - name: Show Output URL
        if: github.event_name == 'workflow_dispatch'
        run: terraform output static_website_url
